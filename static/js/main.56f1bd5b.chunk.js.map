{"version":3,"sources":["services/AersiaServices.js","components/SongRow.js","components/SongTable.js","components/ControlButton.js","components/ProgressBar.js","components/PlayerControls.js","App.js","serviceWorker.js","index.js"],"names":["AersiaServices","getPlaylist","playlist","playlists","url","axios","get","then","response","data","VIP","mellow","source","exiled","WAP","CPP","SongRow","_ref","song","index","selectSong","className","react_default","a","createElement","style","cursor","onClick","creator","title","SongTable","songs","rows","selectedSong","map","id","concat","components_SongRow","key","paddingBottom","paddingTop","ControlButton","img","click","_ref$color","color","buttonStyle","khtmlUserSelect","OUserSelect","MozUserSelect","WebkitUserSelect","userSelect","ProgressBar","progressPercent","mouseDown","trackBarRef","pointRef","progress","position","left","top","bottom","height","width","background","point","transform","onMouseDown","e","ref","PlayerControls","player","useRef","trackBar","dragging","_useState","useState","_useState2","Object","slicedToArray","currentTrackMoment","setCurrentTrackMoment","_useState3","_useState4","currentTrackDuration","setCurrentTrackDuration","_useState5","_useState6","progressBarWidth","setProgressBarWidth","_useState7","_useState8","play","setPlay","_useState9","_useState10","shuffle","setShuffle","_useState11","_useState12","previousSongs","setPreviousSongs","randomSongPosition","Math","floor","random","length","handlePlay","songPosition","randomSong","current","pause","handlePreviousSong","slice","handleNextSong","indexOfSelectedSong","findIndex","nextSong","songsWithoutSelectedSong","assign","handleShuffle","handleSecondsToMinutes","sec","isNaN","minutes","seconds","handlePointPosition","trackBarWidth","offsetWidth","handleLeft","offsetLeft","handleMouseMove","pageX","handleMouseUp","pointPercent","currentTime","duration","window","removeEventListener","handleMouseDown","addEventListener","useEffect","src","location","onTimeUpdate","onLoadedMetadata","onEnded","onError","isMobile","test","navigator","userAgent","timeStyle","margin","controlStyle","display","gridTemplateColumns","selectedSongStyle","backgroundColor","alignItems","components_ProgressBar","justifyContent","components_ControlButton","controlPlayer","parser","require","App","setSongs","setPlaylist","setSelectedSong","filter","setFilter","_getPlaylist","asyncToGenerator","regenerator_default","mark","_callee","event","name","jsonObj","wrap","_context","prev","next","preventDefault","target","value","sent","validate","parse","cleanTracklist","trackList","track","Error","t0","console","log","stop","apply","this","arguments","tracks","p","REMOVE_TRACKS_FROM_PLAYLIST_POS","songMap","Map","trackArrays","forEach","has","set","push","handleFilterSongs","s","toLowerCase","indexOf","cleanSongs","titleStyle","innerWidth","innerHeight","fontSize","placeholder","onChange","val","_x","PLAYLIST_OPTIONS","header","components_SongTable","components_PlayerControls","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56f1bd5b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nfunction getPlaylist(playlist) {\r\n  if (!playlists[playlist]) return false;\r\n  const url = playlists[playlist];\r\n  const request = axios.get(url);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nexport default { getPlaylist };\r\n\r\nconst playlists = {\r\n  VIP: 'https://vip.aersia.net/roster.xml',\r\n  mellow: 'https://vip.aersia.net/roster-mellow.xml',\r\n  source: 'https://vip.aersia.net/roster-source.xml',\r\n  exiled: 'https://vip.aersia.net/roster-exiled.xml',\r\n  WAP: 'https://wap.aersia.net/roster.xml',\r\n  CPP: 'https://cpp.aersia.net/roster.xml'\r\n}\r\n","import React from 'react';\r\n\r\nfunction SongRow({song, index, selectSong, className}) {\r\n  const rowStyle = {\r\n    cursor: 'pointer'\r\n  }\r\n\r\n  return (\r\n    <tr\r\n      style={rowStyle}\r\n      onClick={() => selectSong(song)} \r\n      className={className}\r\n      >\r\n      <td>{index} {song.creator} - {song.title}</td>\r\n    </tr>\r\n  )\r\n\r\n}\r\n\r\nexport default SongRow;","import React from 'react';\r\nimport SongRow from './SongRow';\r\n\r\nfunction SongTable({songs, selectSong, selectedSong = false}) {\r\n\r\n  const tableStyle= {\r\n    paddingBottom: '60px',\r\n    paddingTop: '53px'\r\n  }\r\n\r\n  const rows = songs.map((song) => {\r\n    const id = `${song.creator}-${song.title}`;\r\n    return <SongRow \r\n              song={song}\r\n              key={id} \r\n              selectSong={selectSong}/>\r\n  })\r\n  return (\r\n    <table style={tableStyle}>\r\n      <tbody>\r\n        {rows}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default SongTable;","import React from 'react';\r\n\r\nfunction ControlButton({img, click, color = null}) {\r\n  const buttonStyle = {\r\n    cursor: 'pointer',\r\n    color: color,\r\n    khtmlUserSelect: 'none',\r\n    OUserSelect: 'none',\r\n    MozUserSelect: 'none',\r\n    WebkitUserSelect: 'none',\r\n    userSelect: 'none'\r\n  }\r\n  return (\r\n    <div>\r\n      <i className='material-icons' onClick={() => click()} style={buttonStyle}>{img}</i>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ControlButton;","import React from 'react';\r\n\r\nfunction ProgressBar({progressPercent, mouseDown, trackBarRef, pointRef}) {\r\n\r\n  const track = {\r\n    position: 'relative',\r\n    width: '100%',\r\n    height: '10px',\r\n    background: '#7f6157',\r\n  }\r\n\r\n  const progress = {\r\n    position: 'absolute',\r\n    left: 0,\r\n    top: 0,\r\n    bottom: '10px',\r\n    height: '10px',\r\n    width: `${progressPercent}`,\r\n    background: '#FF9148'\r\n  }\r\n\r\n  const point = {\r\n    position: 'absolute',\r\n    left : `${progressPercent}`,\r\n    top: '50%',\r\n    bottom: '10px',\r\n    height: '12px',\r\n    width: '12px',\r\n    background: 'white',\r\n    transform: `translate(-50%, -50%)`\r\n  }\r\n\r\n  return (\r\n    <div style={track} onMouseDown={(e) => mouseDown(e)} ref={trackBarRef}>\r\n      <div style={progress} />\r\n      {/* <div style={point} ref={pointRef} /> */}\r\n      <div style={point} onMouseDown={(e) => mouseDown(e)} ref={pointRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProgressBar;","import React, {useState, useEffect, useRef} from 'react';\r\nimport ControlButton from './ControlButton';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nfunction PlayerControls({songs, selectSong, selectedSong}) {\r\n\r\n  const player = useRef();\r\n  const trackBar = useRef();\r\n  const point = useRef();\r\n  const dragging = useRef();\r\n\r\n  const [currentTrackMoment, setCurrentTrackMoment] = useState(0);\r\n  const [currentTrackDuration, setCurrentTrackDuration] = useState(0);\r\n  const [progressBarWidth, setProgressBarWidth ] = useState(0);\r\n\r\n  const [play, setPlay] = useState(false);\r\n  const [shuffle, setShuffle] = useState(true);\r\n  const [previousSongs, setPreviousSongs] = useState([]);\r\n  // const [volume, setVolume] = useState(100);\r\n  // const [showVolume, setShowVolume] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setCurrentTrackMoment(0);\r\n    setCurrentTrackDuration(0);\r\n    setProgressBarWidth(0);\r\n    handleNewSong();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  },[selectedSong])\r\n\r\n  function randomSongPosition() {\r\n    // songs.length - 1 as current song playing is removed from list\r\n    return Math.floor(Math.random() * (songs.length - 1));\r\n  }\r\n\r\n  function handleNewSong() {\r\n    if (selectedSong) {\r\n      setPreviousSongs(previousSongs.concat(selectedSong));\r\n      player.current.src = selectedSong.location;\r\n      player.current.play();\r\n      setPlay(true);\r\n    }\r\n  }\r\n\r\n  function handlePlay() {\r\n    if (selectedSong === null) {\r\n      const songPosition = shuffle ? randomSongPosition() : 0;\r\n      const randomSong = songs[songPosition];\r\n      selectSong(randomSong);\r\n    } else if (play === true) {\r\n      player.current.pause();\r\n      setPlay(false);\r\n    } else {\r\n      player.current.play()\r\n      setPlay(true);\r\n    }\r\n  }\r\n\r\n  function handleTimeUpdate() {\r\n    setCurrentTrackMoment(Math.floor(player.current.currentTime));\r\n    if (!dragging.current) {\r\n      setProgressBarWidth(\r\n        ((player.current.currentTime / player.current.duration) * 100) + '%'\r\n      );\r\n    }\r\n  }\r\n\r\n  function handleLoadedMetaData() {\r\n    setCurrentTrackDuration(Math.floor(player.current.duration));\r\n  }\r\n\r\n  function handlePreviousSong() {\r\n    if (previousSongs.length > 1) {\r\n      const song = previousSongs[previousSongs.length - 2];\r\n      setPreviousSongs(previousSongs.slice(0, previousSongs.length - 2));\r\n      selectSong(song);\r\n    }\r\n  }\r\n\r\n  function handleNextSong() {\r\n    let indexOfSelectedSong = songs.findIndex(song => song.title === selectedSong.title);\r\n    let songPosition = 0;\r\n    let nextSong = null;\r\n    // can't shuffle if there is only one song\r\n    if (!shuffle || songs.length === 1) {\r\n      songPosition = indexOfSelectedSong + 1 > songs.length - 1 ? 0 : indexOfSelectedSong + 1;\r\n      nextSong = Object.assign({}, songs[songPosition]);\r\n    } else {\r\n      songPosition = randomSongPosition();\r\n      const songsWithoutSelectedSong = songs.slice(0, indexOfSelectedSong).concat(songs.slice(indexOfSelectedSong + 1));\r\n      nextSong = Object.assign({}, songsWithoutSelectedSong[songPosition])\r\n    }\r\n    selectSong(nextSong);\r\n  }\r\n\r\n  function handleShuffle() {\r\n    setShuffle(!shuffle);\r\n  }\r\n\r\n  // function handleVolume(e) {\r\n  //   setVolume(e.target.value);\r\n  //   player.current.volume = e.target.value / 100;\r\n  // }\r\n\r\n  function handleError() {\r\n    handleNextSong();\r\n  }\r\n\r\n  function handleSecondsToMinutes(sec) {\r\n    if (sec === 0 || isNaN(sec)) return '00:00'\r\n    let minutes = Math.floor(sec / 60) + '';\r\n    let seconds = sec - minutes * 60 + ''; \r\n    minutes = minutes.length === 1 ? '0' + minutes : minutes;\r\n    seconds = seconds.length === 1 ? '0' + seconds : seconds;\r\n    return `${minutes}:${seconds}`;\r\n  }\r\n\r\n  function handlePointPosition(position) {\r\n    const trackBarWidth = trackBar.current.offsetWidth;\r\n    const handleLeft = position - trackBar.current.offsetLeft;\r\n    const pointPercent = ((handleLeft / trackBarWidth) * 100);\r\n\r\n    if (handleLeft > 0 && handleLeft < trackBarWidth) {\r\n      setProgressBarWidth(pointPercent + '%');\r\n    } else if (handleLeft < 0) {\r\n      setProgressBarWidth('0%');\r\n    } else if (handleLeft > trackBarWidth) {\r\n      setProgressBarWidth('100%');\r\n    }\r\n  }\r\n\r\n  function handleMouseMove(e) {\r\n    dragging.current = true;\r\n    handlePointPosition(e.pageX);\r\n  }\r\n\r\n  function handleMouseUp(e) {\r\n    const trackBarWidth = trackBar.current.offsetWidth;\r\n    const handleLeft = e.pageX - trackBar.current.offsetLeft;\r\n    const pointPercent = (handleLeft / trackBarWidth);\r\n\r\n    if (selectedSong) {\r\n      player.current.currentTime = (pointPercent * player.current.duration);\r\n    }\r\n    dragging.current = false;\r\n    window.removeEventListener('mousemove', handleMouseMove);\r\n    window.removeEventListener('mouseup', handleMouseUp);\r\n  }\r\n\r\n  function handleMouseDown(e) {\r\n    dragging.current = true;\r\n    handlePointPosition(e.pageX);\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    window.addEventListener('mouseup', handleMouseUp);\r\n  }\r\n\r\n  function controlPlayer() {\r\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\r\n    const playerStyle = {\r\n      position: 'fixed',\r\n      paddingBottom: '10px',\r\n      bottom: '0',\r\n      width: '100%',\r\n      height: '50px',\r\n      backgroundColor: '#262626'\r\n    }\r\n    \r\n    const buttonStyle = {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-evenly'\r\n    }\r\n\r\n    const progressStyle = {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    }\r\n\r\n    const timeStyle = {\r\n      margin: '0 1rem'\r\n    }\r\n\r\n    const controlStyle = {\r\n      display: (isMobile) ? null : 'grid',\r\n      gridTemplateColumns: '40% auto 40%'\r\n    }\r\n\r\n    const selectedSongStyle = {\r\n      display: (isMobile) ? 'none' : null,\r\n      margin: '0 1rem'\r\n    }\r\n\r\n    // const volumeStyle = {\r\n    //   width: '100%'\r\n    // }\r\n\r\n    return (\r\n      <div style={playerStyle}>\r\n        <div style={progressStyle}>\r\n          <p style={timeStyle}>{handleSecondsToMinutes(currentTrackMoment)}</p>\r\n          <ProgressBar \r\n            progressPercent={progressBarWidth} \r\n            trackBarRef={trackBar} \r\n            pointRef={point} \r\n            mouseDown={handleMouseDown}\r\n          />\r\n          <p style={timeStyle}>{handleSecondsToMinutes(currentTrackDuration - currentTrackMoment)}</p>\r\n        </div>\r\n        <div style={controlStyle}>\r\n          <div style={selectedSongStyle}>\r\n            {selectedSong ? `${selectedSong.title}` : ''}\r\n          </div>\r\n          <div style={buttonStyle}>\r\n            {shuffle ? \r\n              <ControlButton img='shuffle' click={handleShuffle} color={'#FF9148'} /> :\r\n              <ControlButton img='shuffle' click={handleShuffle} />\r\n            }\r\n            {play ? \r\n              <ControlButton img='pause_circle_outline' click={handlePlay} /> :\r\n              <ControlButton img='play_circle_outline' click={handlePlay} /> \r\n            }\r\n            <ControlButton img='skip_previous' click={handlePreviousSong} />\r\n            <ControlButton img='skip_next' click={handleNextSong}/>\r\n            {/* <ControlButton img='volume_up' click={() => setShowVolume(!showVolume)} /> */}\r\n          </div>\r\n          <div>\r\n            {/* {showVolume ? \r\n              <div style={volumeStyle}>\r\n                <input type='range' min='0' max='100' value={volume} onChange={(e) => handleVolume(e)}/>\r\n              </div>\r\n            : null} */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <audio \r\n      ref={player}\r\n      onTimeUpdate={() => handleTimeUpdate()}\r\n      onLoadedMetadata={() => handleLoadedMetaData()}\r\n      onEnded={() => handleNextSong()} \r\n      onError={() => handleError()}\r\n      >\r\n        Oops\r\n      </audio>\r\n      {controlPlayer()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlayerControls;","import React, {useState, useEffect} from 'react';\r\nimport AersiaServices from './services/AersiaServices';\r\nimport SongTable from './components/SongTable';\r\nimport PlayerControls from './components/PlayerControls';\r\n\r\nconst parser = require('fast-xml-parser');\r\n\r\nfunction App() {\r\n  const [songs, setSongs] = useState([]);\r\n  const [playlist, setPlaylist] = useState('mellow');\r\n  const [selectedSong, setSelectedSong] = useState(null);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect((() => {\r\n    AersiaServices\r\n      .getPlaylist(playlist)\r\n      .then(trackList => {\r\n        if (!trackList || parser.validate(trackList)) {\r\n          const jsonObj = parser.parse(trackList);\r\n          const cleanSongs = cleanTracklist(jsonObj.playlist.trackList.track, playlist);\r\n          setSongs(cleanSongs);\r\n        } else {\r\n          console.log('error, invalid playlist xml format', playlist);;\r\n          throw new Error('invalid playlist');\r\n        }\r\n      })    \r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }), []);\r\n\r\n  async function getPlaylist (event) {\r\n    event.preventDefault();\r\n    const name = event.target.value;\r\n    try {\r\n      setPlaylist(name);\r\n      const response = await AersiaServices.getPlaylist(name);\r\n      if (!response || parser.validate(response)) {\r\n        const jsonObj = parser.parse(response);\r\n        setSongs(cleanTracklist(jsonObj.playlist.trackList.track, name));\r\n      } else {\r\n        throw new Error('invalid playlist xml format');\r\n      }\r\n    } catch (exception) {\r\n        console.log(exception);\r\n    }\r\n  }\r\n\r\n  // ensures uniqueness, removes additional info from \r\n  function cleanTracklist(tracks, p) {\r\n    tracks = tracks.slice(REMOVE_TRACKS_FROM_PLAYLIST_POS[p][0], tracks.length-REMOVE_TRACKS_FROM_PLAYLIST_POS[p][1]);\r\n    let songMap = new Map(); // used to ensure uniqueness\r\n    const trackArrays = [];\r\n    tracks.forEach(track => {\r\n      let id = `${track.title}-${track.creator}`;\r\n      if (!songMap.has(id) && track.creator !== 'All Tracks' && track.creator !== 'I have spoken with God') {\r\n        songMap.set(id, track);\r\n        trackArrays.push(track);\r\n      }\r\n    })\r\n    songMap = null;\r\n    return trackArrays;\r\n  }\r\n  \r\n  function selectSong(song) {\r\n    setSelectedSong(song);\r\n  }\r\n\r\n  function handleFilter(val) {\r\n    setFilter(val);\r\n  }\r\n\r\n  function handleFilterSongs(songs) {\r\n    return songs.filter(s => `${s.creator} - ${s.title}`.toLowerCase().indexOf(filter.toLowerCase()) !== -1);\r\n  }\r\n\r\n  if (songs.length === 0) {\r\n    return (\r\n      <div>\r\n        <p>Loading...</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function header() {\r\n    const headerStyle = {\r\n      position: 'fixed',\r\n      width: '100%',\r\n      height: '53px',\r\n      backgroundColor: '#262626',\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center'\r\n    }\r\n    const titleStyle = {\r\n      display: (window.innerWidth <= 812 && window.innerHeight <= 812) ? 'none' : null,\r\n      margin: '0 1rem',\r\n    }\r\n    const itemsStyle = {\r\n      margin: '0.5rem 1rem'\r\n    }\r\n\r\n    return (\r\n      <div style={headerStyle}>\r\n        <div>\r\n          {/* <p>Video Game Music Player</p> */}\r\n          <div style={titleStyle}>\r\n            <div>VGM</div>\r\n            <div style={{fontSize: '0.50rem'}}>playlists by Cats777</div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <input value={filter} placeholder='Search...' onChange={(e) => handleFilter(e.target.value)}/>\r\n          <select value={playlist} onChange={(event) => getPlaylist(event)} style={itemsStyle}>\r\n            {PLAYLIST_OPTIONS.map(playlist => <option value={playlist} key={playlist}>{playlist}</option>)}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {header()}\r\n      <SongTable songs={handleFilterSongs(songs)} \r\n        selectSong={selectSong} \r\n        selectedSong={selectedSong} \r\n      />\r\n      <PlayerControls songs={handleFilterSongs(songs)}\r\n        selectSong={selectSong} \r\n        selectedSong={selectedSong} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst PLAYLIST_OPTIONS = [\r\n  'VIP',\r\n  'mellow',\r\n  'source',\r\n  'exiled',\r\n  'WAP',\r\n  'CPP'\r\n];\r\n\r\nconst REMOVE_TRACKS_FROM_PLAYLIST_POS = {\r\n  VIP: [5,1],\r\n  mellow: [3,2],\r\n  source: [5,1],\r\n  exiled: [1,0],\r\n  WAP: [3,0],\r\n  CPP: [1,0]\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}